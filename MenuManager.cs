using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Program
{
    public class MenuManager
    {
        private static readonly Dictionary<string, List<(string nome, string comando, string descricao)>> Categorias = new()
        {
            {
                "üåê Navegadores", new List<(string, string, string)>
                {
                    ("Firefox", "firefox", "Navegador web de c√≥digo aberto"),
                    ("Google Chrome", "google-chrome", "Navegador r√°pido e seguro do Google"),
                    ("Chromium", "chromium", "Projeto de c√≥digo aberto do Chrome"),
                    ("Tor Browser", "tor-browser", "Navegador para anonimato online")
                }
            },
            {
                "üíª Desenvolvimento", new List<(string, string, string)>
                {
                     ("Eclipse", "/home/wagner/eclipse/java-2024-09/eclipse/eclipse", "IDE Java popular"),
                    ("Rider", "rider", "IDE da JetBrains para .NET (pasta RiderProjects presente)"),
                    ("Visual Studio Code", "code", "Editor de c√≥digo da Microsoft"),
                    ("LunarVim", "lvim", "IDE Vim moderno"),
                    ("Vim (Terminal)", "vim", "Editor de texto poderoso"),
                    ("GVim (Interface Gr√°fica)", "gvim", "Vim com interface gr√°fica"),
                    ("Terminal", "gnome-terminal", "Emulador de terminal GNOME"),
                    ("Editor Nano", "nano", "Editor de texto simples"),

                }
            },
            {
                "üñºÔ∏è Multim√≠dia", new List<(string, string, string)>
                {
                    ("GIMP (Editor de Imagens)", "gimp", "Editor de imagens profissional"),
                    ("Spotify", "spotify", "Servi√ßo de streaming musical"),
                    ("VLC Media Player", "vlc", "Reprodutor de m√≠dia vers√°til"),
                    ("Rhythmbox", "rhythmbox", "Gerenciador de m√∫sica do GNOME"),
                    ("Cheese (Webcam)", "cheese", "Aplicativo para fotos e v√≠deos com webcam")
                }
            },
            {
                "üõ†Ô∏è Sistema", new List<(string, string, string)>
                {
                    ("Gerenciador de Arquivos (Nautilus)", "nautilus", "Navegador de arquivos do GNOME"),
                    ("Controle de √Åudio (pavucontrol)", "pavucontrol", "Mixer de √°udio PulseAudio"),
                    ("Monitor do Sistema", "gnome-system-monitor", "Visualizador de processos e recursos"),
                    ("Gerenciador de Tarefas (htop)", "htop", "Monitor de sistema interativo"),
                    ("Captura de Tela (scrot)", "scrot", "Ferramenta de captura de tela"),
                    ("Bloco de Notas (Xed)", "xed", "Editor de texto simples"),
                    ("Gerenciador de Pacotes Synaptic", "synaptic", "Gerenciador gr√°fico de pacotes"),
                    ("Configura√ß√µes do Sistema", "gnome-control-center", "Painel de controle do GNOME"),
                    ("Terminal Root (pkexec)", "pkexec gnome-terminal", "Terminal com privil√©gios de root")
                }
            },
              {
                "üéÆ Jogos", new List<(string, string, string)>
                {
                    ("Roblox", "flatpak run org.vinegarhq.Sober", "Plataforma de jogos online"),
                    ("Steam", "steam", "Plataforma de jogos digitais"),
                    ("ProtonUp-Qt", "protonup-qt", "Gerenciador de vers√µes do Proton"),
                    ("Minecraft", "minecraft-launcher", "Jogo sandbox de constru√ß√£o"),
                    ("Wine", "winecfg", "Camada de compatibilidade para Windows")
                }
            },
        };

        public static void MenuCategorias()
        {
            Console.Title = "üöÄ Super Executor de Programas üöÄ";
            Console.CursorVisible = false;

            while (true)
            {
                UIHelper.DesenharCabecalho("üåü MENU PRINCIPAL üåü");
                UIHelper.EscreverColorido("Escolha uma categoria:\n", UIHelper.CorDestaque, true);

                var nomesCategorias = Categorias.Keys.ToList();
                int selecionado = UIHelper.SelecionarOpcao(nomesCategorias, "Voltar");

                if (selecionado == -1) return;

                var nomeCategoria = nomesCategorias[selecionado];
                var programas = Categorias[nomeCategoria];

                GerenciarProgramasDaCategoria(nomeCategoria, programas);
            }
        }

        private static void GerenciarProgramasDaCategoria(string nomeCategoria, List<(string nome, string comando, string descricao)> programas)
        {
            while (true)
            {
                UIHelper.DesenharCabecalho(nomeCategoria);
                UIHelper.EscreverColorido("Escolha um programa:\n", UIHelper.CorDestaque, true);

                int programaSelecionado = UIHelper.SelecionarOpcao(
                    programas.Select(p => p.nome).ToList(),
                    "Voltar",
                    programas.Select(p => p.descricao).ToList()
                );

                if (programaSelecionado == -1) break;

                ExecutarProgramaSelecionado(programas[programaSelecionado]);
            }
        }

        private static void ExecutarProgramaSelecionado((string nome, string comando, string descricao) programa)
        {
            UIHelper.DesenharCabecalho(programa.nome);
            UIHelper.EscreverColorido($"üìù Descri√ß√£o: {programa.descricao}\n", UIHelper.CorNormal);
            UIHelper.EscreverColorido("Deseja executar este programa?", UIHelper.CorDestaque);
            
            if (UIHelper.ConfirmarAcao())
            {
                try
                {
                    UIHelper.EscreverColorido($"\nüöÄ Iniciando {programa.nome}...", UIHelper.CorSucesso);
                    Process.Start(programa.comando);
                }
                catch (Exception ex)
                {
                    UIHelper.EscreverColorido($"\n‚ùå Erro ao abrir {programa.nome}: {ex.Message}", UIHelper.CorErro);
                }
            }
            else
            {
                UIHelper.EscreverColorido("\nOpera√ß√£o cancelada.", UIHelper.CorSecundaria);
            }

            UIHelper.EscreverColorido("\n‚úÖ Pressione qualquer tecla para continuar...", UIHelper.CorSecundaria);
            Console.ReadKey();
        }
    }
}